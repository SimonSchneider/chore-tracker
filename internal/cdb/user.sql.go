// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package cdb

import (
	"context"
)

const createPasswordAuth = `-- name: CreatePasswordAuth :exec
INSERT INTO password_auth
    (user_id, username, hash)
VALUES (?, ?, ?)
`

type CreatePasswordAuthParams struct {
	UserID   string
	Username string
	Hash     string
}

func (q *Queries) CreatePasswordAuth(ctx context.Context, arg CreatePasswordAuthParams) error {
	_, err := q.db.ExecContext(ctx, createPasswordAuth, arg.UserID, arg.Username, arg.Hash)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user
    (id, display_name, created_at, updated_at)
VALUES (?, ?, ?, ?)
RETURNING id, display_name, created_at, updated_at
`

type CreateUserParams struct {
	ID          string
	DisplayName string
	CreatedAt   int64
	UpdatedAt   int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.DisplayName,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPasswordAuthByUsername = `-- name: GetPasswordAuthByUsername :one
SELECT user_id, username, hash
FROM password_auth
WHERE username = ?
`

func (q *Queries) GetPasswordAuthByUsername(ctx context.Context, username string) (PasswordAuth, error) {
	row := q.db.QueryRowContext(ctx, getPasswordAuthByUsername, username)
	var i PasswordAuth
	err := row.Scan(&i.UserID, &i.Username, &i.Hash)
	return i, err
}

const getPasswordAuthsByUser = `-- name: GetPasswordAuthsByUser :many
SELECT username
FROM password_auth
WHERE user_id = ?
`

func (q *Queries) GetPasswordAuthsByUser(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPasswordAuthsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, display_name, created_at, updated_at
FROM user
WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

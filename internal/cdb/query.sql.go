// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package cdb

import (
	"context"
	"database/sql"
)

const addUserToChoreList = `-- name: AddUserToChoreList :exec
INSERT INTO chore_list_members
    (chore_list_id, user_id)
VALUES (?, ?)
`

type AddUserToChoreListParams struct {
	ChoreListID string
	UserID      string
}

func (q *Queries) AddUserToChoreList(ctx context.Context, arg AddUserToChoreListParams) error {
	_, err := q.db.ExecContext(ctx, addUserToChoreList, arg.ChoreListID, arg.UserID)
	return err
}

const choreListsForUser = `-- name: ChoreListsForUser :many
SELECT cl.id, cl.created_at, cl.updated_at, cl.name
FROM chore_list cl
         JOIN chore_list_members clm ON cl.id = clm.chore_list_id
WHERE clm.user_id = ?
`

func (q *Queries) ChoreListsForUser(ctx context.Context, userID string) ([]ChoreList, error) {
	rows, err := q.db.QueryContext(ctx, choreListsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChoreList
	for rows.Next() {
		var i ChoreList
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const completeChore = `-- name: CompleteChore :exec
UPDATE chore
SET last_completion = ?,
    snoozed_for     = 0
WHERE id = ?
`

type CompleteChoreParams struct {
	LastCompletion int64
	ID             string
}

func (q *Queries) CompleteChore(ctx context.Context, arg CompleteChoreParams) error {
	_, err := q.db.ExecContext(ctx, completeChore, arg.LastCompletion, arg.ID)
	return err
}

const createChore = `-- name: CreateChore :one
INSERT INTO chore
    (id, name, interval, created_at, last_completion, snoozed_for)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, name, interval, last_completion, snoozed_for, created_at, chore_list_id, created_by
`

type CreateChoreParams struct {
	ID             string
	Name           string
	Interval       int64
	CreatedAt      int64
	LastCompletion int64
	SnoozedFor     int64
}

func (q *Queries) CreateChore(ctx context.Context, arg CreateChoreParams) (Chore, error) {
	row := q.db.QueryRowContext(ctx, createChore,
		arg.ID,
		arg.Name,
		arg.Interval,
		arg.CreatedAt,
		arg.LastCompletion,
		arg.SnoozedFor,
	)
	var i Chore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Interval,
		&i.LastCompletion,
		&i.SnoozedFor,
		&i.CreatedAt,
		&i.ChoreListID,
		&i.CreatedBy,
	)
	return i, err
}

const createChoreEvent = `-- name: CreateChoreEvent :exec
INSERT INTO chore_event
    (id, chore_id, occurred_at)
VALUES (?, ?, ?)
`

type CreateChoreEventParams struct {
	ID         string
	ChoreID    string
	OccurredAt int64
}

func (q *Queries) CreateChoreEvent(ctx context.Context, arg CreateChoreEventParams) error {
	_, err := q.db.ExecContext(ctx, createChoreEvent, arg.ID, arg.ChoreID, arg.OccurredAt)
	return err
}

const createInvite = `-- name: CreateInvite :one
INSERT INTO invitation
    (id, created_at, expires_at, chore_list_id, created_by)
VALUES (?, ?, ?, ?, ?)
RETURNING id, created_at, expires_at, chore_list_id, created_by
`

type CreateInviteParams struct {
	ID          string
	CreatedAt   int64
	ExpiresAt   int64
	ChoreListID sql.NullString
	CreatedBy   string
}

func (q *Queries) CreateInvite(ctx context.Context, arg CreateInviteParams) (Invitation, error) {
	row := q.db.QueryRowContext(ctx, createInvite,
		arg.ID,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.ChoreListID,
		arg.CreatedBy,
	)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.ChoreListID,
		&i.CreatedBy,
	)
	return i, err
}

const createPasswordAuth = `-- name: CreatePasswordAuth :exec
INSERT INTO password_auth
    (user_id, username, hash)
VALUES (?, ?, ?)
`

type CreatePasswordAuthParams struct {
	UserID   string
	Username string
	Hash     string
}

func (q *Queries) CreatePasswordAuth(ctx context.Context, arg CreatePasswordAuthParams) error {
	_, err := q.db.ExecContext(ctx, createPasswordAuth, arg.UserID, arg.Username, arg.Hash)
	return err
}

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens
    (user_id, token, expires_at)
VALUES (?, ?, ?)
`

type CreateTokenParams struct {
	UserID    string
	Token     string
	ExpiresAt int64
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user
    (id, created_at, updated_at)
VALUES (?, ?, ?)
RETURNING id, created_at, updated_at
`

type CreateUserParams struct {
	ID        string
	CreatedAt int64
	UpdatedAt int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.CreatedAt, arg.UpdatedAt)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteChore = `-- name: DeleteChore :exec
DELETE
FROM chore
WHERE id = ?
`

func (q *Queries) DeleteChore(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteChore, id)
	return err
}

const deleteInvite = `-- name: DeleteInvite :one
DELETE
FROM invitation
WHERE id = ?
  AND expires_at > ?
RETURNING id, created_at, expires_at, chore_list_id, created_by
`

type DeleteInviteParams struct {
	ID        string
	ExpiresAt int64
}

func (q *Queries) DeleteInvite(ctx context.Context, arg DeleteInviteParams) (Invitation, error) {
	row := q.db.QueryRowContext(ctx, deleteInvite, arg.ID, arg.ExpiresAt)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.ChoreListID,
		&i.CreatedBy,
	)
	return i, err
}

const deleteTokensByUserId = `-- name: DeleteTokensByUserId :exec
DELETE
FROM tokens
WHERE user_id = ?
`

func (q *Queries) DeleteTokensByUserId(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteTokensByUserId, userID)
	return err
}

const getChore = `-- name: GetChore :one
SELECT id, name, interval, last_completion, snoozed_for, created_at, chore_list_id, created_by
FROM chore
WHERE id = ?
`

func (q *Queries) GetChore(ctx context.Context, id string) (Chore, error) {
	row := q.db.QueryRowContext(ctx, getChore, id)
	var i Chore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Interval,
		&i.LastCompletion,
		&i.SnoozedFor,
		&i.CreatedAt,
		&i.ChoreListID,
		&i.CreatedBy,
	)
	return i, err
}

const getChoreListByUser = `-- name: GetChoreListByUser :one
SELECT cl.id, cl.created_at, cl.updated_at, cl.name
FROM chore_list cl
         JOIN chore_list_members clm ON cl.id = clm.chore_list_id
WHERE clm.user_id = ?
  AND cl.id = ?
`

type GetChoreListByUserParams struct {
	UserID string
	ID     string
}

func (q *Queries) GetChoreListByUser(ctx context.Context, arg GetChoreListByUserParams) (ChoreList, error) {
	row := q.db.QueryRowContext(ctx, getChoreListByUser, arg.UserID, arg.ID)
	var i ChoreList
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getInvite = `-- name: GetInvite :one
SELECT inv.id, inv.created_at, inv.expires_at, inv.chore_list_id, inv.created_by, cl.name as chore_list_name, pa.username as created_by_name
FROM invitation inv
         LEFT JOIN chore_list cl ON inv.chore_list_id = cl.id
         LEFT JOIN user u on inv.created_by = u.id
         LEFT JOIN password_auth pa on u.id = pa.user_id
WHERE inv.id = ?
  AND inv.expires_at > ?
`

type GetInviteParams struct {
	ID        string
	ExpiresAt int64
}

type GetInviteRow struct {
	ID            string
	CreatedAt     int64
	ExpiresAt     int64
	ChoreListID   sql.NullString
	CreatedBy     string
	ChoreListName sql.NullString
	CreatedByName sql.NullString
}

func (q *Queries) GetInvite(ctx context.Context, arg GetInviteParams) (GetInviteRow, error) {
	row := q.db.QueryRowContext(ctx, getInvite, arg.ID, arg.ExpiresAt)
	var i GetInviteRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.ChoreListID,
		&i.CreatedBy,
		&i.ChoreListName,
		&i.CreatedByName,
	)
	return i, err
}

const getPasswordAuthByUsername = `-- name: GetPasswordAuthByUsername :one
SELECT user_id, username, hash
FROM password_auth
WHERE username = ?
`

func (q *Queries) GetPasswordAuthByUsername(ctx context.Context, username string) (PasswordAuth, error) {
	row := q.db.QueryRowContext(ctx, getPasswordAuthByUsername, username)
	var i PasswordAuth
	err := row.Scan(&i.UserID, &i.Username, &i.Hash)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT user_id, token, expires_at
FROM tokens
WHERE token = ?
  AND expires_at > ?
`

type GetTokenParams struct {
	Token     string
	ExpiresAt int64
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, arg.Token, arg.ExpiresAt)
	var i Token
	err := row.Scan(&i.UserID, &i.Token, &i.ExpiresAt)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at
FROM user
WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const listChores = `-- name: ListChores :many
SELECT id, name, interval, last_completion, snoozed_for, created_at, chore_list_id, created_by
FROM chore
ORDER BY last_completion DESC, name ASC, id ASC
`

func (q *Queries) ListChores(ctx context.Context) ([]Chore, error) {
	rows, err := q.db.QueryContext(ctx, listChores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chore
	for rows.Next() {
		var i Chore
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Interval,
			&i.LastCompletion,
			&i.SnoozedFor,
			&i.CreatedAt,
			&i.ChoreListID,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const snoozeChore = `-- name: SnoozeChore :exec
UPDATE chore
SET snoozed_for = ?
WHERE id = ?
`

type SnoozeChoreParams struct {
	SnoozedFor int64
	ID         string
}

func (q *Queries) SnoozeChore(ctx context.Context, arg SnoozeChoreParams) error {
	_, err := q.db.ExecContext(ctx, snoozeChore, arg.SnoozedFor, arg.ID)
	return err
}

const updateChore = `-- name: UpdateChore :exec
UPDATE chore
SET name     = ?,
    interval = ?
WHERE id = ?
`

type UpdateChoreParams struct {
	Name     string
	Interval int64
	ID       string
}

func (q *Queries) UpdateChore(ctx context.Context, arg UpdateChoreParams) error {
	_, err := q.db.ExecContext(ctx, updateChore, arg.Name, arg.Interval, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package cdb

import (
	"context"
)

const completeChore = `-- name: CompleteChore :exec
UPDATE chore
SET last_completion = ?,
    snoozed_for     = 0
WHERE id = ?
`

type CompleteChoreParams struct {
	LastCompletion int64
	ID             string
}

func (q *Queries) CompleteChore(ctx context.Context, arg CompleteChoreParams) error {
	_, err := q.db.ExecContext(ctx, completeChore, arg.LastCompletion, arg.ID)
	return err
}

const createChore = `-- name: CreateChore :one
INSERT INTO chore
    (id, name, interval, last_completion, snoozed_for)
VALUES (?, ?, ?, ?, ?)
RETURNING id, name, interval, last_completion, snoozed_for
`

type CreateChoreParams struct {
	ID             string
	Name           string
	Interval       int64
	LastCompletion int64
	SnoozedFor     int64
}

func (q *Queries) CreateChore(ctx context.Context, arg CreateChoreParams) (Chore, error) {
	row := q.db.QueryRowContext(ctx, createChore,
		arg.ID,
		arg.Name,
		arg.Interval,
		arg.LastCompletion,
		arg.SnoozedFor,
	)
	var i Chore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Interval,
		&i.LastCompletion,
		&i.SnoozedFor,
	)
	return i, err
}

const createChoreEvent = `-- name: CreateChoreEvent :exec
INSERT INTO chore_event
    (id, chore_id, occurred_at)
VALUES (?, ?, ?)
`

type CreateChoreEventParams struct {
	ID         string
	ChoreID    string
	OccurredAt int64
}

func (q *Queries) CreateChoreEvent(ctx context.Context, arg CreateChoreEventParams) error {
	_, err := q.db.ExecContext(ctx, createChoreEvent, arg.ID, arg.ChoreID, arg.OccurredAt)
	return err
}

const deleteChore = `-- name: DeleteChore :exec
DELETE
FROM chore
WHERE id = ?
`

func (q *Queries) DeleteChore(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteChore, id)
	return err
}

const getChore = `-- name: GetChore :one
SELECT id, name, interval, last_completion, snoozed_for
FROM chore
WHERE id = ?
`

func (q *Queries) GetChore(ctx context.Context, id string) (Chore, error) {
	row := q.db.QueryRowContext(ctx, getChore, id)
	var i Chore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Interval,
		&i.LastCompletion,
		&i.SnoozedFor,
	)
	return i, err
}

const listChores = `-- name: ListChores :many
SELECT id, name, interval, last_completion, snoozed_for
FROM chore
ORDER BY last_completion DESC, name ASC, id ASC
`

func (q *Queries) ListChores(ctx context.Context) ([]Chore, error) {
	rows, err := q.db.QueryContext(ctx, listChores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chore
	for rows.Next() {
		var i Chore
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Interval,
			&i.LastCompletion,
			&i.SnoozedFor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const snoozeChore = `-- name: SnoozeChore :exec
UPDATE chore
SET snoozed_for = ?
WHERE id = ?
`

type SnoozeChoreParams struct {
	SnoozedFor int64
	ID         string
}

func (q *Queries) SnoozeChore(ctx context.Context, arg SnoozeChoreParams) error {
	_, err := q.db.ExecContext(ctx, snoozeChore, arg.SnoozedFor, arg.ID)
	return err
}

const updateChore = `-- name: UpdateChore :exec
UPDATE chore
SET name     = ?,
    interval = ?
WHERE id = ?
`

type UpdateChoreParams struct {
	Name     string
	Interval int64
	ID       string
}

func (q *Queries) UpdateChore(ctx context.Context, arg UpdateChoreParams) error {
	_, err := q.db.ExecContext(ctx, updateChore, arg.Name, arg.Interval, arg.ID)
	return err
}
